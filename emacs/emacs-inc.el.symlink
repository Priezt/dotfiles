;; in ~/.emacs.el, add following line
;; (load-file "~/.emacs-inc.el")

(set-language-environment 'UTF-8)
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; install packages
(dolist (package-name '(
		paredit
		restclient
		helpful
		ace-window
		markdown-mode
		hy-mode
	))
	(unless (package-installed-p package-name)
	  (package-refresh-contents)
	  (package-install package-name))
	(require package-name))

(unless (version< emacs-version "25.1")
		(unless (package-installed-p 'helm)
			(progn
				(package-refresh-contents)
				(package-install 'helm))))

;; common
(global-set-key (kbd "C-t") 'isearch-forward)
(define-key isearch-mode-map (kbd "C-t") 'isearch-repeat-forward)
(global-set-key (kbd "C-x C-t") 'save-buffer)
(set-face-background 'mode-line "black")
(set-face-foreground 'mode-line "yellow")
(global-unset-key (kbd "M-\\"))
(global-set-key (kbd "M-\\") 'just-one-space)

;; org-mode
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)

;; helm
(if (package-installed-p 'helm)
    (progn
      (require 'helm)
      (helm-mode 1)
      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
      (global-set-key (kbd "C-x C-b") 'helm-buffers-list)))

;; helpful
(if (package-installed-p 'helpful)
    (progn
      (require 'helpful)
      (global-set-key (kbd "C-h f") 'helpful-callable)
      (global-set-key (kbd "C-h v") 'helpful-variable)
      (global-set-key (kbd "C-h k") 'helpful-key)
      (global-set-key (kbd "C-h x") 'helpful-command)))

;; ace-window
(if (package-installed-p 'ace-window)
    (progn
      (require 'ace-window)
      (global-set-key (kbd "M-o") 'ace-window)))

;; UI
;;(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(defalias 'yes-or-no-p 'y-or-n-p)

;; avy
(if (package-installed-p 'avy)
    (progn
      (avy-setup-default)
      (global-set-key (kbd "M-j") 'avy-goto-char-2)))

;; paredit
(define-key paredit-mode-map (kbd "{") 'paredit-open-curly)
(define-key paredit-mode-map (kbd "}") 'paredit-close-curly)

;; modes
(add-to-list 'auto-mode-alist '("\\.cl\\'" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\.el\\'" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\.hy\\'" . hy-mode))
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'hy-mode-hook #'enable-paredit-mode)
(add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))

;; code-snippets
(defun call-cs ()
  "Call code-snippet"
  (interactive)
  (setq output
	(replace-regexp-in-string
	 "[\r\n]+" ""
	 (shell-command-to-string
	  (concat
	   "/root/code-snippets/bin/cs-for-emacs "
	   (buffer-file-name)))))
  (if (string-match "code-snippets.*:[0-9]+" output)
      (progn
	(setq parts (split-string output ":"))
	(setq file (car parts))
	(setq line (cadr parts))
	(let ((new-window (split-window-below)))
	  (select-window new-window)
	  (find-file file)
	  (goto-line (string-to-number line))))))
(global-set-key (kbd "C-c s") 'call-cs)
